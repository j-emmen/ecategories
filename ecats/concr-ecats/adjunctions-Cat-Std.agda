
{-# OPTIONS --without-K #-}

module ecats.concr-ecats.adjunctions-Cat-Std where

open import tt-basics.basics
open import tt-basics.setoids renaming (||_|| to ||_||std)
open import ecats.basic-defs.ecat-def&not
open import ecats.isomorphism
open import ecats.functors.defs.efunctor-d&n
open import ecats.functors.defs.natural-transformation
open import ecats.functors.defs.natural-iso
open import ecats.functors.defs.adjunction
open import ecats.functors.props.efunctor
open import ecats.concr-ecats.ecat-ecats
open import ecats.concr-ecats.Type-lev
open import ecats.concr-ecats.Std-lev


-----------------------------------------------------------------------
-- The obvious "functor" from Cat to Type is not extensional
-----------------------------------------------------------------------
{-
attempt : efunctor Cat Type
attempt = record
  { FObj = ecat.Obj
  ; FHom = efctr.‚Çí
  ; isF = record
        { ext = Œª {f = F} {F'} natiso ‚Üí {!!} -- it's just FX ‚âÖ F'X, not FX == F'X as required.
        ; id = Œª {‚ÑÇ} X ‚Üí =rf
        ; cmp = Œª F G X ‚Üí =rf
        }
  }
-}

module obj-up-to-iso {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ) where
  private
    module ‚ÑÇ where
      open ecat ‚ÑÇ public
      open iso-d&p ‚ÑÇ public
  Obj/‚âÖ‚Çí : setoid {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ ‚äî ‚Ñì‚ÇÉ}
  Obj/‚âÖ‚Çí = record
         { object = ‚ÑÇ.Obj
         ; _‚àº_ = Œª X Y ‚Üí X ‚ÑÇ.‚âÖ‚Çí Y
         ; istteqrel = record
                     { refl = ‚ÑÇ.‚âÖ‚Çírefl
                     ; sym = ‚ÑÇ.‚âÖ‚Çísym
                     ; tra = ‚ÑÇ.‚âÖ‚Çítra
                     }
         }
  module Obj/‚âÖ‚Çí = setoid-aux Obj/‚âÖ‚Çí
-- end obj-up-to-iso

module efctrs-are-ext {‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çê ‚Ñì‚ÇÅ~}{‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çê ‚Ñì‚ÇÅ~}
                      {‚Ñì‚ÇÇ‚Çí ‚Ñì‚ÇÇ‚Çê ‚Ñì‚ÇÇ~}{ùîª : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÇ‚Çí ‚Ñì‚ÇÇ‚Çê ‚Ñì‚ÇÇ~}
                      (F : efunctor‚Çó‚Çë·µ• ‚ÑÇ ùîª)
                      where
  private
    module ‚ÑÇ where
      open ecat ‚ÑÇ public
      open iso-d&p ‚ÑÇ public
    module ùîª where
      open ecat ùîª public
      open iso-d&p ùîª public
    module F where
      open efctr F public
      open efunctor-lev-props F public
  open obj-up-to-iso
  ‚Çí/‚âÖ‚Çí : setoidmap (Obj/‚âÖ‚Çí ‚ÑÇ) (Obj/‚âÖ‚Çí ùîª)
  ‚Çí/‚âÖ‚Çí = record
    { op = F.‚Çí
    ; ext = F.pres‚âÖ‚Çí
    }
-- end efctrs-are-ext

module making-efctrs-ext-is-ext {‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çê ‚Ñì‚ÇÅ~}{‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çê ‚Ñì‚ÇÅ~}
                                {‚Ñì‚ÇÇ‚Çí ‚Ñì‚ÇÇ‚Çê ‚Ñì‚ÇÇ~}{ùîª : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÇ‚Çí ‚Ñì‚ÇÇ‚Çê ‚Ñì‚ÇÇ~}
                                {F G : efunctor‚Çó‚Çë·µ• ‚ÑÇ ùîª}(natiso : F ‚âÖ‚Çê G)
                                where
  private
    module ‚ÑÇ where
      open ecat ‚ÑÇ public
      open iso-d&p ‚ÑÇ public
    module ùîª where
      open ecat ùîª public
      open iso-d&p ùîª public
    module F where
      open efctr F public
      open efunctor-lev-props F public
    module G where
      open efctr G public
      open efunctor-lev-props G public
    module F‚âÖG = natural-iso natiso
  ‚âÖptw : (X : ‚ÑÇ.Obj) ‚Üí F.‚Çí X ùîª.‚âÖ‚Çí G.‚Çí X
  ‚âÖptw X = record
    { a12 = F‚âÖG.fnc
    ; a21 = F‚âÖG.fnc‚Åª¬π
    ; isop = F‚âÖG.isiso
    }
-- end making-efctrs-ext-is-ext


--------------------------------------------------------------
-- Objects functor from categories to setoids, at every level
--------------------------------------------------------------

O/‚âÖ‚Çí : (‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level) ‚Üí efunctor (CAT‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~) (Std‚Çó‚Çë·µ• ‚Ñì‚Çí (‚Ñì‚Çê ‚äî ‚Ñì~))
O/‚âÖ‚Çí ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ = record
  { FObj = Obj/‚âÖ‚Çí
  ; FHom = ‚Çí/‚âÖ‚Çí
  ; isF = record
        { ext = ‚âÖptw
        ; id = Œª {‚ÑÇ} X ‚Üí Obj/‚âÖ‚Çí.r ‚ÑÇ {X}
        ; cmp = Œª {‚ÑÇ} {ùîª} {ùîº} F G X ‚Üí Obj/‚âÖ‚Çí.r ùîº {_}
        }
  }
  where open obj-up-to-iso
        open efctrs-are-ext
        open making-efctrs-ext-is-ext











{-
module Setoid-of-arrows {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ) where
  private module ‚ÑÇ = ecat ‚ÑÇ

  Arr-ty : Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ)
  Arr-ty = Œ£ (prod ‚ÑÇ.Obj ‚ÑÇ.Obj) (Œª XY ‚Üí || ‚ÑÇ.Hom (prj1 XY) (prj2 XY) ||)

  Arr-eq : Arr-ty ‚Üí Arr-ty ‚Üí Set 
  Arr-eq u u' = {!!}

  Arr : setoid {‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ}
  Arr = record
      { object = Arr-ty
      ; _‚àº_ = {!!}
      ; istteqrel = {!!}
      }

-- end Setoid-of-arrows
-}
