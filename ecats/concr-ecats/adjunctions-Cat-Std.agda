
{-# OPTIONS --without-K #-}

module ecats.concr-ecats.adjunctions-Cat-Std where

open import tt-basics.basics
open import tt-basics.setoids renaming (||_|| to ||_||std)
open import ecats.basic-defs.ecat-def&not
open import ecats.basic-defs.preorder
open import ecats.isomorphism
open import ecats.functors.defs.efunctor-d&n
open import ecats.functors.defs.natural-transformation
open import ecats.functors.defs.natural-iso
open import ecats.functors.defs.adjunction
open import ecats.functors.defs.basic-defs
open import ecats.functors.props.efunctor
open import ecats.concr-ecats.ecat-ecats
open import ecats.concr-ecats.Type-lev
open import ecats.concr-ecats.Std-lev


-----------------------------------------------------------------------
-- The obvious "functor" from Cat to Type is not extensional
-----------------------------------------------------------------------
{-
attempt : efunctor Cat Type
attempt = record
  { FObj = ecat.Obj
  ; FHom = efctr.‚Çí
  ; isF = record
        { ext = Œª {f = F} {F'} natiso ‚Üí {!!} -- it's just FX ‚âÖ F'X, not FX == F'X as required.
        ; id = Œª {‚ÑÇ} X ‚Üí =rf
        ; cmp = Œª F G X ‚Üí =rf
        }
  }
-}


-- From ecategories to setoids

module obj-up-to-iso {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ) where
  private
    module ‚ÑÇ where
      open ecat ‚ÑÇ public
      open iso-d&p ‚ÑÇ public
  Obj/‚âÖ‚Çí : setoid {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ ‚äî ‚Ñì‚ÇÉ}
  Obj/‚âÖ‚Çí = record
         { object = ‚ÑÇ.Obj
         ; _‚àº_ = Œª X Y ‚Üí X ‚ÑÇ.‚âÖ‚Çí Y
         ; istteqrel = record
                     { refl = ‚ÑÇ.‚âÖ‚Çírefl
                     ; sym = ‚ÑÇ.‚âÖ‚Çísym
                     ; tra = ‚ÑÇ.‚âÖ‚Çítra
                     }
         }
  module Obj/‚âÖ‚Çí = setoid-aux Obj/‚âÖ‚Çí
-- end obj-up-to-iso

module efctrs-are-ext {‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çê ‚Ñì‚ÇÅ~}{‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çê ‚Ñì‚ÇÅ~}
                      {‚Ñì‚ÇÇ‚Çí ‚Ñì‚ÇÇ‚Çê ‚Ñì‚ÇÇ~}{ùîª : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÇ‚Çí ‚Ñì‚ÇÇ‚Çê ‚Ñì‚ÇÇ~}
                      (F : efunctor‚Çó‚Çë·µ• ‚ÑÇ ùîª)
                      where
  private
    module ‚ÑÇ where
      open ecat ‚ÑÇ public
      open iso-d&p ‚ÑÇ public
    module ùîª where
      open ecat ùîª public
      open iso-d&p ùîª public
    module F where
      open efctr F public
      open efunctor-lev-props F public
  open obj-up-to-iso
  ‚Çí/‚âÖ‚Çí : setoidmap (Obj/‚âÖ‚Çí ‚ÑÇ) (Obj/‚âÖ‚Çí ùîª)
  ‚Çí/‚âÖ‚Çí = record
    { op = F.‚Çí
    ; ext = F.pres‚âÖ‚Çí
    }
-- end efctrs-are-ext

module making-efctrs-ext-is-ext {‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çê ‚Ñì‚ÇÅ~}{‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çê ‚Ñì‚ÇÅ~}
                                {‚Ñì‚ÇÇ‚Çí ‚Ñì‚ÇÇ‚Çê ‚Ñì‚ÇÇ~}{ùîª : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÇ‚Çí ‚Ñì‚ÇÇ‚Çê ‚Ñì‚ÇÇ~}
                                {F G : efunctor‚Çó‚Çë·µ• ‚ÑÇ ùîª}(natiso : F ‚âÖ‚Çê G)
                                where
  private
    module ‚ÑÇ where
      open ecat ‚ÑÇ public
      open iso-d&p ‚ÑÇ public
    module ùîª where
      open ecat ùîª public
      open iso-d&p ùîª public
    module F where
      open efctr F public
      open efunctor-lev-props F public
    module G where
      open efctr G public
      open efunctor-lev-props G public
    module F‚âÖG = natural-iso natiso
  ‚âÖptw : (X : ‚ÑÇ.Obj) ‚Üí F.‚Çí X ùîª.‚âÖ‚Çí G.‚Çí X
  ‚âÖptw X = record
    { a12 = F‚âÖG.fnc
    ; a21 = F‚âÖG.fnc‚Åª¬π
    ; isop = F‚âÖG.isiso
    }
-- end making-efctrs-ext-is-ext


--------------------------------------------------------------
-- Objects functor from categories to setoids, at every level
--------------------------------------------------------------

Ob/‚âÖ‚Çí : (‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level) ‚Üí efunctor (CAT‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~) (Std‚Çó‚Çë·µ• ‚Ñì‚Çí (‚Ñì‚Çê ‚äî ‚Ñì~))
Ob/‚âÖ‚Çí ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ = record
  { FObj = Obj/‚âÖ‚Çí
  ; FHom = ‚Çí/‚âÖ‚Çí
  ; isF = record
        { ext = ‚âÖptw
        ; id = Œª {‚ÑÇ} X ‚Üí Obj/‚âÖ‚Çí.r ‚ÑÇ {X}
        ; cmp = Œª {‚ÑÇ} {ùîª} {ùîº} F G X ‚Üí Obj/‚âÖ‚Çí.r ùîº {_}
        }
  }
  where open obj-up-to-iso
        open efctrs-are-ext
        open making-efctrs-ext-is-ext



-- From setoid to ecategories

Disc-ecat : {‚Ñì‚Çí ‚Ñì·µ£ : Level} ‚Üí setoid {‚Ñì‚Çí} {‚Ñì·µ£} ‚Üí ecategory‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì·µ£ 0‚Çó‚Çë·µ•
Disc-ecat A = record
  { Obj = || A ||std
  ; Hom = Œª a b ‚Üí codisc-std (a A.~ b)
  ; isecat = record
               { _‚àò_ = Œª g f ‚Üí A.tra f g
               ; idar = A.refl
               ; ‚àòext = Œª _ _ _ _ _ _ ‚Üí 0‚ÇÅ
               ; lidax = Œª _ ‚Üí 0‚ÇÅ
               ; ridax = Œª _ ‚Üí 0‚ÇÅ
               ; assoc = Œª _ _ _ ‚Üí 0‚ÇÅ
               }
  }
  where module A where
          open setoid A public
          open setoid-aux A public

Disc-is-preord : {‚Ñì‚Çí ‚Ñì·µ£ : Level}(A : setoid {‚Ñì‚Çí} {‚Ñì·µ£}) ‚Üí is-preorder (Disc-ecat A)
Disc-is-preord A = record { pf = 0‚ÇÅ }

Disc-map : {‚Ñì‚Çí‚ÇÅ ‚Ñì·µ£‚ÇÅ : Level}{A : setoid {‚Ñì‚Çí‚ÇÅ} {‚Ñì·µ£‚ÇÅ}}{‚Ñì‚Çí‚ÇÇ ‚Ñì·µ£‚ÇÇ : Level}{B : setoid {‚Ñì‚Çí‚ÇÇ} {‚Ñì·µ£‚ÇÇ}}
                ‚Üí setoidmap A B ‚Üí efunctor‚Çó‚Çë·µ• (Disc-ecat A) (Disc-ecat B)
Disc-map {A = A} {B = B} f = record
  { FObj = f.op
  ; FHom = f.ext
  ; isF = record
        { ext = Œª _ ‚Üí 0‚ÇÅ
        ; id = Œª {_} ‚Üí 0‚ÇÅ
        ; cmp = Œª _ _ ‚Üí 0‚ÇÅ
        }
  }
  where module f = setoidmap f

module Disc-is-functorial (‚Ñì‚Çí ‚Ñì·µ£ : Level) where
  private
    module CAT = ecat (CAT‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì·µ£ 0‚Çó‚Çë·µ•)
    module Std = ecat (Std‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì·µ£)

  ext : {A B : Std.Obj}{f f' : || Std.Hom A B ||}
           ‚Üí f Std.~ f' ‚Üí (Disc-map f) CAT.~ (Disc-map f')
  ext {A} {B} {f} {f'} eq = record
    { natt = record { fnc = Œª {X} ‚Üí eq X ; nat = Œª _ ‚Üí 0‚ÇÅ }
    ; natt‚Åª¬π = record { fnc = Œª {X} ‚Üí eq X B.À¢ ; nat = Œª _ ‚Üí 0‚ÇÅ }
    ; isiso = record { iddom = 0‚ÇÅ ; idcod = 0‚ÇÅ }
    }
    where module A where
            open setoid A public
            open setoid-aux A public
          module B where
            open setoid B public
            open setoid-aux B public
          module f = setoidmap f

  idax : {A : Std.Obj} ‚Üí Disc-map (Std.idar A) ‚âÖ‚Çê CAT.idar (Disc-ecat A)
  idax {A} = record
    { natt = record { fnc = A.r ; nat = Œª _ ‚Üí 0‚ÇÅ }
    ; natt‚Åª¬π = record { fnc = A.r ; nat = Œª _ ‚Üí 0‚ÇÅ }
    ; isiso = record { iddom = 0‚ÇÅ ; idcod = 0‚ÇÅ }
    }
    where module A where
            open setoid A public
            open setoid-aux A public

  cmpax : {A B C : Std.Obj}(f : || Std.Hom A B ||)(g : || Std.Hom B C ||)
             ‚Üí (Disc-map g) CAT.‚àò (Disc-map f) CAT.~ Disc-map (g Std.‚àò f)
  cmpax {A} {B} {C} f g = record
    { natt = record { fnc = C.r ; nat = Œª _ ‚Üí 0‚ÇÅ }
    ; natt‚Åª¬π = record { fnc = C.r ; nat = Œª _ ‚Üí 0‚ÇÅ }
    ; isiso = record { iddom = 0‚ÇÅ ; idcod = 0‚ÇÅ }
    }
    where module C where
            open setoid C public
            open setoid-aux C public
-- end Disc-is-functorial


---------------------------------------------------------------
-- Discrete functor from setoids to categories, at every level
---------------------------------------------------------------

DiscCat : (‚Ñì‚Çí ‚Ñì·µ£ : Level) ‚Üí efunctor (Std‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì·µ£) (CAT‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì·µ£ 0‚Çó‚Çë·µ•)
DiscCat ‚Ñì‚Çí ‚Ñì·µ£ = record
  { FObj = Disc-ecat
  ; FHom = Disc-map
  ; isF = record
        -- implicit are explicit because of symmetry
        { ext = Œª {A} {B} ‚Üí ext {A} {B}
        ; id = Œª {A} ‚Üí idax {A}
        ; cmp = cmpax
        }
  }
  where open Disc-is-functorial ‚Ñì‚Çí ‚Ñì·µ£



{-
module (‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level) where
  private
    module CAT = ecat (CAT‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~)
    module Std = ecat (Std‚Çó‚Çë·µ• ‚Ñì‚Çí (‚Ñì‚Çê ‚äî ‚Ñì~))
    module O/‚âÖ = efctr (Ob/‚âÖ‚Çí  ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~)
    module ecat&iso (ùïè : CAT.Obj) where
      open ecat ùïè public
      open iso-d&p ùïè public

  module {ùî∏ ùîπ : CAT.Obj}{F G : || CAT.Hom ùî∏ ùîπ ||}(eq : O/‚âÖ.‚Çê F Std.~ O/‚âÖ.‚Çê G) where
    private
      module ùî∏ = ecat&iso ùî∏
      module ùîπ = ecat&iso ùîπ
      module F = efctr F
      module G = efctr G
      module eq (X : ùî∏.Obj) = ùîπ._‚âÖ‚Çí_ (eq X)
-}








{-
module Setoid-of-arrows {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ) where
  private module ‚ÑÇ = ecat ‚ÑÇ

  Arr-ty : Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ)
  Arr-ty = Œ£ (prod ‚ÑÇ.Obj ‚ÑÇ.Obj) (Œª XY ‚Üí || ‚ÑÇ.Hom (prj1 XY) (prj2 XY) ||)

  Arr-eq : Arr-ty ‚Üí Arr-ty ‚Üí Set 
  Arr-eq u u' = {!!}

  Arr : setoid {‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ}
  Arr = record
      { object = Arr-ty
      ; _‚àº_ = {!!}
      ; istteqrel = {!!}
      }

-- end Setoid-of-arrows
-}
