
{-# OPTIONS --without-K #-}

module ecats.constructions.free-ecat-on-refl-graph where

open import tt-basics.all-basics hiding (||_||)
open import ecats.basic-defs.ecat-def&not
open import ecats.basic-defs.isomorphism
open import ecats.basic-props.isomorphism
open import ecats.functors.defs.efunctor-d&n
open import ecats.functors.defs.natural-iso



module free-category-on-graph-defs {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ)
                                   {V : Set ‚Ñì‚ÇÅ}(E : V ‚Üí V ‚Üí setoid {‚Ñì‚ÇÇ} {‚Ñì‚ÇÉ})
                                   (refl : (u : V) ‚Üí || E u u ||)
                                   {FO : V ‚Üí ecat.Obj ‚ÑÇ}
                                   (FE : {u v : V} ‚Üí || E u v || ‚Üí || ecat.Hom ‚ÑÇ (FO u) (FO v) ||)
                                   (FEext : {u v : V}{uv uv' : || E u v ||} ‚Üí < E u v > uv ~ uv'
                                              ‚Üí < ecat.Hom ‚ÑÇ (FO u) (FO v) > FE uv ~ FE uv')
                                   (Frefl : (u : V) ‚Üí < ecat.Hom ‚ÑÇ (FO u) (FO u) > FE (refl u) ~ ecat.idar ‚ÑÇ (FO u))
                                   where
  private
    ||E|| : V ‚Üí V ‚Üí Set ‚Ñì‚ÇÇ
    ||E|| u v = || E u v ||
    module ‚ÑÇ = ecat ‚ÑÇ
    module unvprop-aux {‚Ñì‚ÇÅ' ‚Ñì‚ÇÇ' ‚Ñì‚ÇÉ' : Level}(ùïè : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ' ‚Ñì‚ÇÇ' ‚Ñì‚ÇÉ') where
      open ecat ùïè public
      open iso-defs ùïè public
      open iso-props ùïè public

  data fin-path  (u v : V) : Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ) where
    indv : ||E|| u v ‚Üí fin-path u v
    apnd : {w : V} ‚Üí fin-path u w ‚Üí ||E|| w v ‚Üí fin-path u v

  path-rec : {u v : V}{‚Ñì : Level}{PP : fin-path u v ‚Üí Set ‚Ñì}
                ‚Üí ((e : ||E|| u v) ‚Üí PP (indv e))
                ‚Üí ({w : V}(p : fin-path u w)(e : ||E|| w v) ‚Üí PP (apnd p e))
                  ‚Üí (p : fin-path u v) ‚Üí PP p
  path-rec {PP = PP} P·µ¢ P‚Çê (indv e) = P·µ¢ e
  path-rec {PP = PP} P·µ¢ P‚Çê (apnd p e) = P‚Çê p e

  path-rec-all : {‚Ñì : Level}{PP : {u v : V} ‚Üí fin-path u v ‚Üí Set ‚Ñì}
                    ‚Üí ({u v : V}(e : ||E|| u v) ‚Üí PP (indv e))
                    ‚Üí ({u v w : V}(p : fin-path u v)(e : ||E|| v w) ‚Üí PP (apnd p e))
                      ‚Üí {u v : V}(p : fin-path u v) ‚Üí PP p
  path-rec-all {PP = PP} P·µ¢ P‚Çê (indv e) = P·µ¢ e
  path-rec-all {PP = PP} P·µ¢ P‚Çê (apnd p e) = P‚Çê p e


  module path-eq-defs (u v : V) where
  
    record indv-eq (e e' : ||E|| u v) : Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ) where
      field
        pf : e == e'

    record lid-inv (e : ||E|| u v)(p' : fin-path u u)(e' : ||E|| u v) : Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ) where
      field
        pf : e == e'
        -- p' = refl, refl, ..., refl

    record rid-inv (p p' : fin-path u v)(e' : ||E|| v v) : Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ) where
      field
        r-pf : e' == refl v
        -- p = p'


  -- end path-eq-defs
  
  path-eq : {u v : V}(p‚ÇÅ p‚ÇÇ : fin-path u v) ‚Üí Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ)
  path-eq {u} {v} = path-rec {PP = Œª p ‚Üí fin-path u v ‚Üí Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ)}
                             ( Œª e ‚Üí path-rec {PP = Œª p' ‚Üí Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ)}
                                               (indv-eq e)
                                               (Œª p' e' ‚Üí {!!}) )
                             {!!}
                  where open path-eq-defs u v

{-
  path-rec {PP = Œª {x} {y} p ‚Üí fin-path x y ‚Üí Set ‚Ñì‚ÇÇ}
                     ( Œª {u} {v} e ‚Üí path-rec {PP = Œª {x} {y} p ‚Üí Set ‚Ñì‚ÇÇ}
                                               {!Œª e' ‚Üí e == e'!}
                                               {!!} )
                     {!!}
-}

  record pos-path (u v : V) : Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ) where
    field
      length : N
      vx : (i : Fin length) ‚Üí V
    vx+end : (i : Fin (s length)) ‚Üí V
    vx+end = Fin-insr length vx v
    vx+end-fst : V
    vx+end-fst = vx+end (Fin-min length)
    field
      e‚ÇÄ : || E u vx+end-fst ||
      e‚Çö : (i : Fin length) ‚Üí || E (vx i) (vx+end (Fin-suc length i)) ||
    --srt+vx+end : (i : Fin (one +N s length)) ‚Üí V
    --srt+vx+end = Fin-insl (s length) vx+end u
    --e : (i : Fin (s length)) ‚Üí || E (srt+vx+end i) (vx+end (Fin-suc length i)) ||

  ppath-cmp : {u v w : V} ‚Üí pos-path v w ‚Üí pos-path u v ‚Üí pos-path u w
  ppath-cmp {u} {v} {w} vew uev = record
    { length = (s uev.length) +N vew.length
    ; vx = uev+v+vew
    ; e‚ÇÄ = (||E|| u ‚óè e‚ÇÄ-eq) uev.e‚ÇÄ
    ; e‚Çö = e‚Çö
    }
    where module vew = pos-path vew
          module uev = pos-path uev
          uev+v+vew : Fin (s uev.length +N vew.length) ‚Üí V
          uev+v+vew = Fin-+unvar (s uev.length) vew.length uev.vx+end vew.vx
          all-vx : Fin (s uev.length +N s vew.length) ‚Üí V
          all-vx = Fin-insr (s uev.length +N vew.length) uev+v+vew w
          
          uev+v+vew-l : (i : Fin (s uev.length))
                      ‚Üí uev+v+vew (Fin-inl (s uev.length) vew.length i) == uev.vx+end i
          uev+v+vew-l = Fin-+unv-trl (s uev.length) vew.length uev.vx+end vew.vx
          uev+v+vew-r : (i : Fin vew.length)
                      ‚Üí uev+v+vew (Fin-inr (s uev.length) vew.length i) == vew.vx i
          uev+v+vew-r = Fin-+unv-trr (s uev.length) vew.length uev.vx+end vew.vx

          all-vx-l : (i : Fin (s uev.length))
                      ‚Üí all-vx (Fin-inl (s uev.length) (s vew.length) i) == uev.vx+end i
          all-vx-l i = =proof
            all-vx (Fin-inl (s uev.length) (s vew.length) i)
                   ==[ Fin-+unv-trl (s uev.length +N vew.length) one uev+v+vew (Œª _ ‚Üí w) _ ] /
                   -- using that
            -- Fin-inl (s uev.length) (s vew.length) i
            -- = Fin-inl (s uev.length +N vew.length) one (Fin-inl (s uev.length) vew.length i)
            uev+v+vew (Fin-inl (s uev.length) vew.length i)     ==[ uev+v+vew-l i ]‚àé
            uev.vx+end i ‚àé
            
          all-vx-r : (i : Fin (s vew.length))
                      ‚Üí all-vx (Fin-inr (s uev.length) (s vew.length) i) == vew.vx+end i
          all-vx-r = sumrec {A = Fin vew.length} {N‚ÇÅ} {C = Œª i ‚Üí all-vx (Fin-inr (s uev.length) (s vew.length) i) == vew.vx+end i}
                            (Œª i ‚Üí =proof
            all-vx (Fin-inr (s uev.length) (s vew.length) (Fin-emb vew.length i))
                   ==[ Fin-+unv-trl (s uev.length +N vew.length) one uev+v+vew (Œª _ ‚Üí w) _ ] /
                   -- using that
            -- Fin-inr (s uev.length) (s vew.length) (Fin-emb vew.length i)
            -- = Fin-inl (s uev.length +N vew.length) one (Fin-inr (s uev.length) vew.length i)
            uev+v+vew (Fin-inr (s uev.length) vew.length i)     ==[ uev+v+vew-r i ]‚àé
            vew.vx+end (Fin-emb vew.length i) ‚àé)
                            (N‚ÇÅrec =rf) -- this proves that both are w on Fin-max vew.length

          e‚ÇÄ-eq : uev.vx+end (Fin-min uev.length) == all-vx (Fin-min (s uev.length +N vew.length))
          e‚ÇÄ-eq = all-vx-l (Fin-min uev.length) ‚Åª¬π ‚ñ† =ap all-vx (Fin-inl-min uev.length vew.length)
          
          e‚Çö : (i : Fin (s uev.length +N vew.length)) ‚Üí || E (uev+v+vew i) (all-vx (Fin-suc (s uev.length +N vew.length) i)) ||
          e‚Çö = Fin-+rec (s uev.length) vew.length
                        {A = Œª i ‚Üí ||E|| (uev+v+vew i) (all-vx (Fin-suc (s uev.length +N vew.length) i))}
                        ( Finsrec uev.length (Œª i ‚Üí =transp¬≤cnst¬π ||E||
                                                                   (uev+v+vew-l (Fin-emb uev.length i) ‚Åª¬π)
             (all-vx-l (Fin-suc uev.length i) ‚Åª¬π ‚ñ† =ap all-vx (Fin-suc-inl uev.length vew.length i))
                                                                   (uev.e‚Çö i))
                                            (=transp¬≤cnst¬π ||E||
                                                           (uev+v+vew-l (Fin-max uev.length) ‚Åª¬π)
                                                           (all-vx-r (Fin-min vew.length) ‚Åª¬π
                                                            ‚ñ† =ap all-vx (Fin-ass‚ÇÅ uev.length vew.length))
                                                           vew.e‚ÇÄ) )

                        ( Œª i ‚Üí =transp¬≤cnst¬π ||E||
                                               (uev+v+vew-r i ‚Åª¬π)
                                               (=proof
             vew.vx+end (Fin-suc vew.length i)               ==[ all-vx-r (Fin-suc vew.length i) ‚Åª¬π ] /
             all-vx (Fin-inr (s uev.length) (s vew.length) (Fin-suc vew.length i))
                                            ==[ =ap all-vx (Fin-suc-inr (s uev.length) vew.length i) ]‚àé
             all-vx (Fin-suc (s uev.length +N vew.length) (Fin-inr (s uev.length) vew.length i)) ‚àé)
                                               (vew.e‚Çö i ) )
