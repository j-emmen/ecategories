
{-# OPTIONS --without-K #-}

module ecats.constructions.opposite where

open import tt-basics.setoids using (setoid)
--open import tt-basics.id-type
open import ecats.basic-defs.ecat-def&not
open import ecats.basic-defs.initial
open import ecats.finite-limits.defs.terminal
open import ecats.functors.defs.efunctor
open import ecats.functors.defs.id-on-objs
open import ecats.functors.defs.natural-iso


is-ecat-op : {‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level}{Obj : Set ‚Ñì‚Çí}{Hom : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê} {‚Ñì~}}
         ‚Üí is-ecategory Obj Hom ‚Üí is-ecategory Obj (Œª x y ‚Üí Hom y x)
is-ecat-op isecat = record
  { _‚àò_ = Œª g f ‚Üí f ‚àò g
  ; idar = idar
  ; ‚àòext = Œª f f' g g' pff pfg ‚Üí ‚àòext g g' f f' pfg pff
  ; lidax = ridax
  ; ridax = lidax
  ; assoc = Œª f g h ‚Üí assÀ¢
  }
  where open is-ecategory isecat
        open ecategory-aux-level isecat using (assÀ¢)

infix 90 _·µí·µñ
_·µí·µñ : {‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~ : Level}
           ‚Üí ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~ ‚Üí ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~
‚ÑÇ ·µí·µñ = record
     { Obj = Obj
     ; Hom = Œª X Y ‚Üí Hom Y X
     ; isecat = is-ecat-op isecat
     }
     where open ecat ‚ÑÇ

op-small : small-ecategory ‚Üí small-ecategory
op-small ‚ÑÇ = record
  { Obj = Obj
  ; Hom = Œª x y ‚Üí Hom y x
  ; isecat = is-ecat-op isecat
  }
  where open small-ecategory ‚ÑÇ using (Obj; Hom; isecat)

op-locsmall : ecategory ‚Üí ecategory
op-locsmall ‚ÑÇ = record
  { Obj = Obj
  ; Hom = Œª x y ‚Üí Hom y x
  ; isecat = is-ecat-op isecat
  }
  where open ecategory ‚ÑÇ using (Obj; Hom; isecat)


-- functor between opposite categories
infix 100 _·µí
_·µí : {‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~ : Level}{‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~}
     {‚Ñì‚ÇÇ‚Çí ‚Ñì‚ÇÇ‚Çï ‚Ñì‚ÇÇ~ : Level}{ùîª : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÇ‚Çí ‚Ñì‚ÇÇ‚Çï ‚Ñì‚ÇÇ~}
          ‚Üí efunctor‚Çó‚Çë·µ• ‚ÑÇ ùîª ‚Üí efunctor‚Çó‚Çë·µ• (‚ÑÇ ·µí·µñ) (ùîª ·µí·µñ)
F ·µí = record
  { FObj = F.‚Çí
  ; FHom = Œª {A} {B} ‚Üí F.‚Çê {B} {A}
  ; isF = record
        { ext = F.ext
        ; id = F.id
        ; cmp = Œª f g ‚Üí F.cmp g f
        }
  }
  where module F = efctr F


-- The two functors in 'opop' have the same action of the identity functor IdF

opop : {‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~)
            ‚Üí ecat.isecat ((‚ÑÇ ·µí·µñ) ·µí·µñ) ‚âÖ·∂ú·µÉ·µó ecat.isecat ‚ÑÇ
opop ‚ÑÇ = record
  { a12 = a12
  ; a21 = a21
  ; isisopair = record
              { iddom = Œª _ ‚Üí ‚ÑÇ.r
              ; idcod = Œª _ ‚Üí ‚ÑÇ.r
              }
  }
  where module ‚ÑÇ = ecategory-aux ‚ÑÇ
        module ‚ÑÇ·µí·µí = ecat ((‚ÑÇ ·µí·µñ) ·µí·µñ)
        module Id = idobj-efunctor (IdF·µ¢‚Çí {isecat = ‚ÑÇ.isecat})
        a12 : idobj-efunctor ‚ÑÇ·µí·µí.isecat ‚ÑÇ.isecat
        a12 = record
            { ‚Çê = Œª f ‚Üí f
            ; isfctr = record
                  { ext = Id.ext
                  ; id = Id.id
                  ; cmp = Id.cmp
                  }
            }
        a21 : idobj-efunctor ‚ÑÇ.isecat ‚ÑÇ·µí·µí.isecat
        a21 = record
            { ‚Çê = Œª f ‚Üí f
            ; isfctr = record
                  { ext = Id.ext
                  ; id = Id.id
                  ; cmp = Id.cmp
                  }
            }



{-
opop : {‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~)
            ‚Üí efunctor ((‚ÑÇ ·µí·µñ) ·µí·µñ) ‚ÑÇ
opop ‚ÑÇ = record
  { FObj = Œª X ‚Üí X
  ; FHom = Œª f ‚Üí f
  ; isF = record
        { ext = Œª pf ‚Üí pf
        ; id = r
        ; cmp = Œª f g ‚Üí r
        }
  }
  where open ecategory-aux ‚ÑÇ

popo : {‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~)
            ‚Üí efunctor ‚ÑÇ ((‚ÑÇ ·µí·µñ) ·µí·µñ)
popo ‚ÑÇ = record
  { FObj = Œª X ‚Üí X
  ; FHom = Œª f ‚Üí f
  ; isF = record
        { ext = Œª pf ‚Üí pf
        ; id = r
        ; cmp = Œª f g ‚Üí r
        }
  }
  where open ecategory-aux ‚ÑÇ

opiso : {‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~)
             ‚Üí opop ‚ÑÇ ‚óã popo ‚ÑÇ ‚âÖ‚Çê IdF {‚ÑÇ = ‚ÑÇ}
opiso ‚ÑÇ = record
  { natt = record
         { fnc = Œª {A} ‚Üí ‚ÑÇ.idar A
         ; nat = Œª f ‚Üí ‚ÑÇ.lidgen ‚ÑÇ.ridÀ¢
         }
  ; natt‚Åª¬π = record
         { fnc = Œª {A} ‚Üí ‚ÑÇ.idar A
         ; nat = Œª f ‚Üí ‚ÑÇ.lidgen ‚ÑÇ.ridÀ¢
         }
  ; isiso = Œª {A} ‚Üí record
          { iddom = ‚ÑÇ.rid
          ; idcod = ‚ÑÇ.rid
          }
  }
  where module ‚ÑÇ = ecategory-aux ‚ÑÇ


opiso‚Çí : {‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~)
             ‚Üí popo ‚ÑÇ ‚óã opop ‚ÑÇ ‚âÖ‚Çê IdF {‚ÑÇ = (‚ÑÇ ·µí·µñ) ·µí·µñ}
opiso‚Çí ‚ÑÇ = record
  { natt = record
         { fnc = Œª {A} ‚Üí ‚ÑÇ.idar A
         ; nat = Œª f ‚Üí ‚ÑÇ.lidgen ‚ÑÇ.ridÀ¢
         }
  ; natt‚Åª¬π = record
         { fnc = Œª {A} ‚Üí ‚ÑÇ.idar A
         ; nat = Œª f ‚Üí ‚ÑÇ.lidgen ‚ÑÇ.ridÀ¢
         }
  ; isiso = Œª {A} ‚Üí record
          { iddom = ‚ÑÇ.rid
          ; idcod = ‚ÑÇ.rid
          }
  }
  where module ‚ÑÇ = ecategory-aux ‚ÑÇ
-}


module opposite-props {‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚ÇÅ‚Çí ‚Ñì‚ÇÅ‚Çï ‚Ñì‚ÇÅ~) where
  private
    module ‚ÑÇ where
      open ecategory-aux ‚ÑÇ public
      open initial-defs ‚ÑÇ public
      open terminal-defs ‚ÑÇ public
    module ‚ÑÇ·µí where
      open ecategory-aux (‚ÑÇ ·µí·µñ) public
      open initial-defs (‚ÑÇ ·µí·µñ) public
      open terminal-defs (‚ÑÇ ·µí·µñ) public

  init‚Üíterm·µí : {X : ‚ÑÇ.Obj} ‚Üí ‚ÑÇ.is-initial X ‚Üí ‚ÑÇ·µí.is-terminal X
  init‚Üíterm·µí {X} isinit = record
    { ! = X.√∏
    ; !uniq = X.√∏uq
    }
    where module X = ‚ÑÇ.is-initial isinit

  term‚Üíinit·µí : {X : ‚ÑÇ.Obj} ‚Üí ‚ÑÇ.is-terminal X ‚Üí ‚ÑÇ·µí.is-initial X
  term‚Üíinit·µí {X} isterm = record
    { √∏ = X.!
    ; √∏uq = X.!uniq
    }
    where module X = ‚ÑÇ.is-terminal isterm

  init·µí‚Üíterm : {X : ‚ÑÇ.Obj} ‚Üí ‚ÑÇ·µí.is-initial X ‚Üí ‚ÑÇ.is-terminal X
  init·µí‚Üíterm {X} isinit·µí = record
    { ! = X.√∏
    ; !uniq = X.√∏uq
    }
    where module X = ‚ÑÇ·µí.is-initial isinit·µí

  term·µí‚Üíinit : {X : ‚ÑÇ.Obj} ‚Üí ‚ÑÇ·µí.is-terminal X ‚Üí ‚ÑÇ.is-initial X
  term·µí‚Üíinit {X} isterm·µí = record
    { √∏ = X.!
    ; √∏uq = X.!uniq
    }
    where module X = ‚ÑÇ·µí.is-terminal isterm·µí
    

-- end opposite-props
