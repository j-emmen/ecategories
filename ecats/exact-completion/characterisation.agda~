
-- disable the K axiom:

{-# OPTIONS --without-K  #-}

-- Agda version 2.5.4.1

module ecats.exact-completion.characterisation where

open import ecats.basic-defs.ecat-def&not
open import ecats.basic-defs.all-arrows
open import ecats.basic-props.epi&mono
open import ecats.basic-defs.regular-ecat
open import ecats.basic-defs.exact-ecat
open import ecats.basic-props.exact-ecat
open import ecats.finite-limits.defs.collective
open import ecats.functors.defs.efunctor-d&n
open import ecats.functors.defs.natural-transformation
open import ecats.functors.defs.basic-defs
open import ecats.functors.defs.preserving-functor
open import ecats.functors.defs.left-covering
open import ecats.functors.props.basic-props
open import ecats.functors.props.left-covering
open import ecats.constructions.ecat-eqrel
open import ecats.exact-completion.construction
open import ecats.exact-completion.finite-limits.fin-limits
open import ecats.exact-completion.exact.is-regular
open import ecats.exact-completion.embedding.universal-property.def
open import ecats.exact-completion.embedding.universal-property.is-left-covering



module exact-compl-universal-is-exact {ℂ : ecategory} (hasfwl : has-fin-weak-limits ℂ) where
  private
    module ℂ where
      open ecategory ℂ public
      open pseudo-eq-rel-defs ℂ public
    module Exℂ where
      open ecategory Ex ℂ [ hasfwl ] public
      open iso-defs Ex ℂ [ hasfwl ] public
      open epis&monos-defs Ex ℂ [ hasfwl ] public
      open epis&monos-props Ex ℂ [ hasfwl ] public
      open image-fact-defs Ex ℂ [ hasfwl ] public
    module Γex = efunctor-aux Γex ℂ [ hasfwl ]
  open exact-compl-universal-def hasfwl

  module extension-is-exact {𝔼 : ecategory} (ex𝔼 : is-exact 𝔼)
                            {F : efunctor ℂ 𝔼} (lcovF : is-left-covering F)
                            where
    private
      module 𝔼 where
        open ecategory 𝔼 public
        open iso-defs 𝔼 public
        open epis&monos-defs 𝔼 public
        open epis&monos-props 𝔼 public
        open eq-rel-defs 𝔼 public
        open kernel-pairs-defs 𝔼 public
      module ex𝔼 where
        open exact-cat-d&p ex𝔼 public
      module F = efunctor-aux F
      module lcF = is-left-covering lcovF
      F↑ex : efunctor Ex ℂ [ hasfwl ] 𝔼
      F↑ex = ↑ex ex𝔼 lcovF
      module F↑ex = efunctor-aux F↑ex
      reg𝔼 : is-regular 𝔼
      reg𝔼 = ex𝔼.exact-is-regular
      -- declaring reg𝔼 explicitly is crucial for typechecking Q/F↑ex.Ob A = F↑ex.ₒ A
      FRel : efunctor Ex ℂ [ hasfwl ] (EqRel 𝔼)
      FRel = Rel reg𝔼 lcovF
      module FRel where
        open efunctor-aux FRel public
        private
          module tmpOb (A : Exℂ.Obj) = 𝔼.eqrel (ₒ A)
          module tmpAr {A B : Exℂ.Obj} (f : || Exℂ.Hom A B ||) = 𝔼.eqrel-mor (ₐ f)
        open tmpOb public
        open tmpAr public
      Q/F↑ex : (A : Exℂ.Obj) → 𝔼.coeq-of (FRel.r₁ A) (FRel.r₂ A)
      Q/F↑ex A = ex𝔼.eqr-has-coeq (FRel.eqrelover A)
      module Q/F↑ex (A : Exℂ.Obj) = 𝔼.coeq-of (Q/F↑ex A)
