
-- disable the K axiom:

{-# OPTIONS --without-K --show-implicit #-}

-- Agda version 2.5.4.1

module ecats.exact-completion.embedding.universal-property.exact where

open import ecats.basic-defs.ecat-def&not
open import ecats.basic-defs.all-arrows
open import ecats.basic-props.epi&mono
open import ecats.basic-defs.regular-ecat
open import ecats.basic-defs.exact-ecat
open import ecats.basic-props.exact-ecat
open import ecats.finite-limits.defs.collective
open import ecats.functors.defs.efunctor-d&n
open import ecats.functors.defs.natural-transformation
open import ecats.functors.defs.basic-defs
open import ecats.functors.defs.preserving-functor
open import ecats.functors.defs.left-covering
open import ecats.exact-completion.construction
open import ecats.exact-completion.exact.canonical-epi&mono
open import ecats.exact-completion.exact.is-regular
open import ecats.exact-completion.embedding.universal-property.eqrel-from-peq
open import ecats.constructions.ecat-eqrel
open import ecats.exact-completion.embedding.universal-property.def
open import ecats.exact-completion.embedding.universal-property.commut



module exact-compl-universal-is-exact {ℂ : ecategory} (hasfwl : has-fin-weak-limits ℂ) where
  private
    module ℂ where
      open ecategory ℂ public
      open pseudo-eq-rel-defs ℂ public
    module Exℂ where
      open ecategory Ex ℂ [ hasfwl ] public
      open epis&monos-defs Ex ℂ [ hasfwl ] public
      open epis&monos-props Ex ℂ [ hasfwl ] public
      open image-fact-defs Ex ℂ [ hasfwl ] public
    module Γex = efunctor-aux Γex ℂ [ hasfwl ]
  --open can-epi&mono-defs hasfwl
  open exact-compl-universal-def hasfwl
  --open eqrel-from-peq-funct hasfwl

  module extension-is-exact {𝔼 : ecategory} (ex𝔼 : is-exact 𝔼)
                            {F : efunctor ℂ 𝔼} (lcovF : is-left-covering F)
                            where
    private
      module 𝔼 where
        open ecategory 𝔼 public
        open iso-defs 𝔼 public
        open epis&monos-defs 𝔼 public
        open epis&monos-props 𝔼 public
        open eq-rel-defs 𝔼 public
        open kernel-pairs-defs 𝔼 public
      module ex𝔼 where
        open exact-cat-d&p ex𝔼 public
      module F = efunctor-aux F
      module lcF = is-left-covering lcovF
      F↑ex : efunctor Ex ℂ [ hasfwl ] 𝔼
      F↑ex = ↑ex ex𝔼 lcovF
      module F↑ex = efunctor-aux F↑ex
      {-module ER𝔼 = ecategory (EqRel 𝔼)
      reg𝔼 : is-regular 𝔼
      reg𝔼 = ex𝔼.exact-is-regular
      I : efunctor Ex ℂ [ hasfwl ] (EqRel 𝔼)
      I = imgPeq reg𝔼 lcovF
      freesq : natural-iso (I ○ Γex ℂ [ hasfwl ]) (ΔER 𝔼 ○ F)
      freesq = imgPeq-sq reg𝔼 lcovF
      module I where
        open efunctor-aux I public
        private
          module tmpOb (A : Exℂ.Obj) = 𝔼.eqrel (ₒ A)
          module tmpAr {A B : Exℂ.Obj} (f : || Exℂ.Hom A B ||) = 𝔼.eqrel-mor (ₐ f)
        open tmpOb public
        open tmpAr public
      module Q = efunctor-aux (QER ex𝔼)
      module cxs = canonical-ex-seq
      module CRF% (A : Exℂ.Obj) where
        open eqrel-from-peq-via-left-covering ex𝔼.exact-is-regular lcovF
        open eqrel-as-repi-mono-fact A public
        open rmfF% public
        open CF% public
      F↑ex-coeq : (A : Exℂ.Obj) → 𝔼.coeq-of (I.r₁ A) (I.r₂ A)
      F↑ex-coeq A = ex𝔼.eqr-has-coeq (I.eqrelover A)
      module F↑ex-coeq (A : Exℂ.Obj) = 𝔼.coeq-of (F↑ex-coeq A)-}



    -- Preserves regular epis
    
    module preserves-repis {A B : Exℂ.Obj} {f : || Exℂ.Hom A B ||} (repi : Exℂ.is-regular-epi f) where
      open ecategory-aux-only 𝔼
      private
        module imgf where
          --open exact-compl-has-repi-mono-fact hasfwl
          open has-repi-mono-fact (ex-cmpl-rm-fact hasfwl)
          open Exℂ.repi-mono-fact-of (rmf-of f) public
      --open exact-compl-has-image-fact qcart
      --open img-fact-objarr f

      check : {X Y Z : Exℂ.Obj} {g' : || Exℂ.Hom X Y ||} {g : || Exℂ.Hom Y Z ||} {h : || Exℂ.Hom X Z ||}
                 → g Exℂ.∘ g' Exℂ.~ h → F↑ex.ₐ g 𝔼.∘ F↑ex.ₐ g' 𝔼.~ F↑ex.ₐ h
      check {X} {Y} {Z} {g'} {g} {h} pf = {!imgf.M!} --F↑ex.∘ax {f = g'} {g} {h} pf --F↑ex.∘ax {f = g'} {g} {h} pf --F↑ex.∘ax {X} {Y} {Z} {g'} {g} {h} pf

      F↑tr : F↑ex.ₐ imgf.M 𝔼.∘ F↑ex.ₐ imgf.C 𝔼.~ F↑ex.ₐ f
      F↑tr = {!F↑ex.∘ax {A} {imgf.Ob} {B} {f = imgf.C} {imgf.M} {f} imgf.tr!} 
      
{-
𝔼._∘_
{F↑ex.FObj A}
{F↑ex.FObj
 (can-epi&mono-defs.canonical-mono.Ob
   {ℂ} {hasfwl} {ℂ.Peq.Lo A} {ℂ.Peq.Lo B} {ℂ.Peq&prods.Peq-mor-aux.lo f} {ℂ.Peq.peqover B}
   (exact-compl-has-repi-mono-fact.rem-fact-objarr.cmf-data {ℂ} hasfwl {A} {B} f))}
{F↑ex.FObj B}
(F↑ex.ₐ
 {can-epi&mono-defs.canonical-mono.Ob
   {ℂ} {hasfwl} {ℂ.Peq.Lo A} {ℂ.Peq.Lo B} {ℂ.Peq&prods.Peq-mor-aux.lo f} {ℂ.Peq.peqover B}
   (exact-compl-has-repi-mono-fact.rem-fact-objarr.cmf-data {ℂ} hasfwl {A} {B} f)}
 {B}
 (can-epi&mono-defs.canonical-mono.ar
   {ℂ} {hasfwl} {ℂ.Peq.Lo A} {ℂ.Peq.Lo B} {ℂ.Peq&prods.Peq-mor-aux.lo f} {ℂ.Peq.peqover B}
   (can-epi&mono-defs.can-mono-constr.cmar-data
     {ℂ} hasfwl {ℂ.Peq.Lo A} {ℂ.Peq.Lo B} (ℂ.Peq&prods.Peq-mor-aux.lo f) (ℂ.Peq.peqover B))))
(F↑ex.ₐ 
 {A}
 {can-epi&mono-defs.canonical-mono.Ob
   {ℂ} {hasfwl} {ℂ.Peq.Lo A} {ℂ.Peq.Lo B} {ℂ.Peq&prods.Peq-mor-aux.lo f} {ℂ.Peq.peqover B}
   (exact-compl-has-repi-mono-fact.rem-fact-objarr.cmf-data {ℂ} hasfwl {A} {B} f)}
 imgf.C)

𝔼._∘_
{F↑ex.FObj A}
{F↑ex.FObj
 (can-epi&mono-defs.canonical-mono.Ob
   {ℂ} {hasfwl} {ℂ.Peq.Lo A} {ℂ.Peq.Lo B} {ℂ.Peq&prods.Peq-mor-aux.lo f} {ℂ.Peq.peqover B}
   (exact-compl-has-repi-mono-fact.rem-fact-objarr.cmf-data {ℂ} hasfwl {A} {B} f))}
{F↑ex.FObj B}
(F↑ex.ₐ
 {can-epi&mono-defs.canonical-mono.Ob
   {ℂ} {hasfwl} {ℂ.Peq.Lo A} {ℂ.Peq.Lo B} {ℂ.Peq&prods.Peq-mor-aux.lo f} {ℂ.Peq.peqover B}
   (exact-compl-has-repi-mono-fact.rem-fact-objarr.cmf-data {ℂ} hasfwl {A} {B} f)}
 {B}
 (can-epi&mono-defs.canonical-mono.ar
   {ℂ} {hasfwl} {ℂ.Peq.Lo A} {ℂ.Peq.Lo B} {ℂ.Peq&prods.Peq-mor-aux.lo f} {ℂ.Peq.peqover B}
   (exact-compl-has-repi-mono-fact.rem-fact-objarr.cmf-data {ℂ} hasfwl {A} {B} f)))
(F↑ex.ₐ {A}
 {can-epi&mono-defs.canonical-mono.Ob
   {ℂ} {hasfwl} {ℂ.Peq.Lo A} {ℂ.Peq.Lo B} {ℂ.Peq&prods.Peq-mor-aux.lo f} {ℂ.Peq.peqover B}
   (exact-compl-has-repi-mono-fact.rem-fact-objarr.cmf-data {ℂ} hasfwl {A} {B} f)}
 (can-epi&mono-defs.canonical-repi.ar
   {ℂ} {hasfwl} {ℂ.Peq.Lo A} {ℂ.Peq.peqover A}
   {exact-compl-has-repi-mono-fact.rem-fact-objarr.cmf.Ob/ {ℂ} hasfwl {A} {B} f}
  (exact-compl-has-repi-mono-fact.rem-fact-objarr.crf-data {ℂ} hasfwl {A} {B} f)))
-}

{-
      -- ΓFₐ imgREpi is repi: here we use that, in the chosen image factorisation,
      -- the quotient is represented by an identity in ℂ.
      ΓFimgQ-triang : Esh.comm-triang
      ΓFimgQ-triang = Esh.mktriang (~proof ΓFₐ imgREpi ∘E (ΓFdₒ.ΓFq A)               ~[ ΓFdₐ.sqₐ imgREpi ] /
                                           ΓFdₒ.ΓFq imgPeq ∘E (Fₐ (idarC imgLo))     ~[ ridgg r Fid ]∎
                                           ΓFdₒ.ΓFq imgPeq ∎)
      
      ΓFimgQ-is-cover : E-e%m.is-cover  (ΓFₐ imgREpi)
      ΓFimgQ-is-cover = E-e%m.cover-triang ΓFimgQ-triang (E-e%m.repi-is-cover (ΓFdₒ.ΓFq-is-repi imgPeq))
      
      ΓFimgQ-is-regular-epi : E-e%m.is-regular-epi (ΓFₐ imgREpi)
      ΓFimgQ-is-regular-epi = cover-is-regular {f = ΓFₐ imgREpi} ΓFimgQ-is-cover

      -- ΓFₐ imgMono is iso, since imgMono is. In particular, it's repi.
      ΓFimgTr : ΓFₐ imgMono ∘E ΓFₐ imgREpi ~E ΓFₐ f
      ΓFimgTr = F∘g {f = imgREpi} {imgMono} {f} imgComm
              where open efunctor-aux ΓF

      imgM-is-iso : ExC-iso.is-iso imgMono
      imgM-is-iso = cov-pf imgComm imgMono-is-monic
                  where open ExC-e%m.is-cover (ExC-e%m.repi-is-cover repi)

      ΓFimgM-is-iso : E-iso.is-iso (ΓFₐ imgMono)
      ΓFimgM-is-iso = record
        { invf = ΓFₐ invf
        ; isiso = Fiso {f = imgMono} {invf = invf} isiso
        }
        where open efunctor-aux ΓF
              open ExC-iso.is-iso imgM-is-iso

      ΓFimgM-is-repi : E-e%m.is-regular-epi (ΓFₐ imgMono)
      ΓFimgM-is-repi = E-e%m.split-epi-is-repi (E-e%m.iso-is-split-epi ΓFimgM-is-iso)
      -}

      -- ΓFₐ f is repi
      F↑exf-repi : 𝔼.is-regular-epi (F↑ex.ₐ f)
      F↑exf-repi = ex𝔼.repi-cmp {!!} {!!} {!!}
      --repi-cmp ΓFimgTr ΓFimgQ-is-regular-epi ΓFimgM-is-repi

    -- end ΓF:repi2repi

  -- end extension-is-exact
-- end exact-compl-universal-is-exact
