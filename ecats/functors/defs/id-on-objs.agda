
{-# OPTIONS --without-K #-}

module ecats.functors.defs.id-on-objs where

open import tt-basics.setoids using (setoid)
open import ecats.basic-defs.ecat-def&not
open import ecats.basic-defs.isomorphism
open import ecats.basic-props.isomorphism
open import ecats.functors.defs.efunctor-d&n
open import ecats.functors.defs.basic-defs
open import ecats.functors.defs.natural-transformation
open import ecats.functors.defs.natural-iso


-- Identity-on-objects functors and isomorphic categories over the same objects

mkecat : {‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level}{Obj : Set ‚Ñì‚Çí}{Hom : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê} {‚Ñì~}}
             ‚Üí is-ecategory Obj Hom ‚Üí ecategory‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~
mkecat {Obj = Obj} {Hom} isecat = record
  { Obj = Obj
  ; Hom = Hom
  ; isecat = isecat
  }



record idobj-efunctor {‚Ñì‚Çí : Level}{Obj : Set ‚Ñì‚Çí}
                      {‚Ñì‚Çê‚ÇÅ ‚Ñì~‚ÇÅ : Level}{Hom1 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÅ} {‚Ñì~‚ÇÅ}}
                      (isecat1 : is-ecategory Obj Hom1)
                      {‚Ñì‚Çê‚ÇÇ ‚Ñì~‚ÇÇ : Level}{Hom2 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÇ} {‚Ñì~‚ÇÇ}}
                      (isecat2 : is-ecategory Obj Hom2)
                      : Set (‚Ñì‚Çí ‚äî ‚Ñì‚Çê‚ÇÅ ‚äî ‚Ñì~‚ÇÅ ‚äî ‚Ñì‚Çê‚ÇÇ ‚äî ‚Ñì~‚ÇÇ) where
  open efunctor-defs (mkecat isecat1) (mkecat isecat2)
  field
    ‚Çê : {A B : Obj} ‚Üí || Hom1 A B || ‚Üí || Hom2 A B ||
    isfctr : is-functorial ‚Çê
  open is-functorial isfctr public


idobj-efunctor-is-efunctor : {‚Ñì‚Çí : Level}{Obj : Set ‚Ñì‚Çí}
                             {‚Ñì‚Çê‚ÇÅ ‚Ñì~‚ÇÅ : Level}{Hom1 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÅ} {‚Ñì~‚ÇÅ}}
                             {isecat1 : is-ecategory Obj Hom1}
                             {‚Ñì‚Çê‚ÇÇ ‚Ñì~‚ÇÇ : Level}{Hom2 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÇ} {‚Ñì~‚ÇÇ}}
                             {isecat2 : is-ecategory Obj Hom2}
                               ‚Üí idobj-efunctor isecat1 isecat2
                                 ‚Üí efunctor‚Çó‚Çë·µ• (mkecat isecat1) (mkecat isecat2)
idobj-efunctor-is-efunctor {isecat1 = isecat1} {isecat2 = isecat2} F = record
  { FObj = Œª X ‚Üí X
  ; FHom = F.‚Çê
  ; isF = record
        { ext = F.ext
        ; id = F.id
        ; cmp = F.cmp
        }
  }
  where module F = idobj-efunctor F

module idobj-efunctor-aux-only {‚Ñì‚Çí : Level}{Obj : Set ‚Ñì‚Çí}
                               {‚Ñì‚Çê‚ÇÅ ‚Ñì~‚ÇÅ : Level}{Hom1 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÅ} {‚Ñì~‚ÇÅ}}
                               {isecat1 : is-ecategory Obj Hom1}
                               {‚Ñì‚Çê‚ÇÇ ‚Ñì~‚ÇÇ : Level}{Hom2 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÇ} {‚Ñì~‚ÇÇ}}
                               {isecat2 : is-ecategory Obj Hom2}
                               (F : idobj-efunctor isecat1 isecat2)
                               where
  open efunctor-aux-only (idobj-efunctor-is-efunctor F) public
-- end idobj-efunctor-aux-only

module idobj-efunctor-aux {‚Ñì‚Çí : Level}{Obj : Set ‚Ñì‚Çí}
                          {‚Ñì‚Çê‚ÇÅ ‚Ñì~‚ÇÅ : Level}{Hom1 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÅ} {‚Ñì~‚ÇÅ}}
                          {isecat1 : is-ecategory Obj Hom1}
                          {‚Ñì‚Çê‚ÇÇ ‚Ñì~‚ÇÇ : Level}{Hom2 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÇ} {‚Ñì~‚ÇÇ}}
                          {isecat2 : is-ecategory Obj Hom2}
                          (F : idobj-efunctor isecat1 isecat2)
                          where
  open idobj-efunctor F public
  open idobj-efunctor-aux-only F public
-- end idobj-efunctor-aux


IdF·µ¢‚Çí : {‚Ñì‚Çí : Level}{Obj : Set ‚Ñì‚Çí}{‚Ñì‚Çê ‚Ñì~ : Level}{Hom : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê} {‚Ñì~}}
       {isecat : is-ecategory Obj Hom}
          ‚Üí idobj-efunctor isecat isecat
IdF·µ¢‚Çí {isecat = isecat} = record
  { ‚Çê = Œª f ‚Üí f
  ; isfctr = record
           { ext = Œª pf ‚Üí pf
           ; id = r
           ; cmp = Œª f g ‚Üí r
           }
  }
  where open ecategory-aux (mkecat isecat) using (r)


infixr 10 _‚óã·µ¢‚Çí_
_‚óã·µ¢‚Çí_ : {‚Ñì‚Çí : Level}{Obj : Set ‚Ñì‚Çí}{‚Ñì‚Çê‚ÇÅ ‚Ñì~‚ÇÅ : Level}{Hom1 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÅ} {‚Ñì~‚ÇÅ}}
        {isecat1 : is-ecategory Obj Hom1}{‚Ñì‚Çê‚ÇÇ ‚Ñì~‚ÇÇ : Level}{Hom2 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÇ} {‚Ñì~‚ÇÇ}}
        {isecat2 : is-ecategory Obj Hom2}{‚Ñì‚Çê‚ÇÉ ‚Ñì~‚ÇÉ : Level}{Hom3 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÉ} {‚Ñì~‚ÇÉ}}
        {isecat3 : is-ecategory Obj Hom3}
          ‚Üí idobj-efunctor isecat2 isecat3 ‚Üí idobj-efunctor isecat1 isecat2
            ‚Üí idobj-efunctor isecat1 isecat3
_‚óã·µ¢‚Çí_ {isecat1 = isecat1} {isecat2 = isecat2} {isecat3 = isecat3} G F = record
  { ‚Çê = Œª f ‚Üí G.‚Çê (F.‚Çê f)
  ; isfctr = record
           { ext = Œª pf ‚Üí G.ext (F.ext pf)
           ; id = Œª {A} ‚Üí G.ext F.id ùîº.‚äô G.id
           ; cmp = Œª f g ‚Üí G.cmp (F.‚Çê f) (F.‚Çê g) ùîº.‚äô G.ext (F.cmp f g)
           }
  }
  where module ùîº = ecategory-aux (mkecat isecat3)
        module F = idobj-efunctor-aux F
        module G = idobj-efunctor-aux G



record is-idobj-iso-pair {‚Ñì‚Çí : Level}{Obj : Set ‚Ñì‚Çí}{‚Ñì‚Çê‚ÇÅ ‚Ñì~‚ÇÅ : Level}
                         {Hom1 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÅ} {‚Ñì~‚ÇÅ}}{isecat1 : is-ecategory Obj Hom1}
                         {‚Ñì‚Çê‚ÇÇ ‚Ñì~‚ÇÇ : Level}{Hom2 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÇ} {‚Ñì~‚ÇÇ}}
                         {isecat2 : is-ecategory Obj Hom2}
                         (F : idobj-efunctor isecat1 isecat2)
                         (G : idobj-efunctor isecat2 isecat1)
                         : Set (‚Ñì‚Çí ‚äî ‚Ñì‚Çê‚ÇÅ ‚äî ‚Ñì~‚ÇÅ ‚äî ‚Ñì‚Çê‚ÇÇ ‚äî ‚Ñì~‚ÇÇ) where
  module dom = ecategory-aux (mkecat isecat1)
  module cod = ecategory-aux (mkecat isecat2)
  module F = idobj-efunctor-aux F
  module G = idobj-efunctor-aux G
  field
    iddom : {A B : Obj}(f : || Hom1 A B ||) ‚Üí G.‚Çê (F.‚Çê f) dom.~ f
    idcod : {A B : Obj}(g : || Hom2 A B ||) ‚Üí F.‚Çê (G.‚Çê g) cod.~ g

record is-idobj-isomorphism {‚Ñì‚Çí : Level}{Obj : Set ‚Ñì‚Çí}{‚Ñì‚Çê‚ÇÅ ‚Ñì~‚ÇÅ : Level}
                            {Hom1 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÅ} {‚Ñì~‚ÇÅ}}{isecat1 : is-ecategory Obj Hom1}
                            {‚Ñì‚Çê‚ÇÇ ‚Ñì~‚ÇÇ : Level}{Hom2 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÇ} {‚Ñì~‚ÇÇ}}
                            {isecat2 : is-ecategory Obj Hom2}
                            (F : idobj-efunctor isecat1 isecat2)
                            : Set (‚Ñì‚Çí ‚äî ‚Ñì‚Çê‚ÇÅ ‚äî ‚Ñì~‚ÇÅ ‚äî ‚Ñì‚Çê‚ÇÇ ‚äî ‚Ñì~‚ÇÇ) where
  field
    inv : idobj-efunctor isecat2 isecat1
    isisopair : is-idobj-iso-pair F inv

infix 10 _‚âÖ·∂ú·µÉ·µó_
record _‚âÖ·∂ú·µÉ·µó_ {‚Ñì‚Çí : Level}{Obj : Set ‚Ñì‚Çí}{‚Ñì‚Çê‚ÇÅ ‚Ñì~‚ÇÅ : Level}{Hom1 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÅ} {‚Ñì~‚ÇÅ}}
             (isecat1 : is-ecategory Obj Hom1){‚Ñì‚Çê‚ÇÇ ‚Ñì~‚ÇÇ : Level}
             {Hom2 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÇ} {‚Ñì~‚ÇÇ}}(isecat2 : is-ecategory Obj Hom2)
             : Set (‚Ñì‚Çí ‚äî ‚Ñì‚Çê‚ÇÅ ‚äî ‚Ñì~‚ÇÅ ‚äî ‚Ñì‚Çê‚ÇÇ ‚äî ‚Ñì~‚ÇÇ) where
  field
    a12 : idobj-efunctor isecat1 isecat2
    a21 : idobj-efunctor isecat2 isecat1
    isisopair : is-idobj-iso-pair a12 a21
  open is-idobj-iso-pair isisopair public


iso-cat‚Üíeqv-cat : {‚Ñì‚Çí : Level}{Obj : Set ‚Ñì‚Çí}{‚Ñì‚Çê‚ÇÅ ‚Ñì~‚ÇÅ : Level}{Hom1 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÅ} {‚Ñì~‚ÇÅ}}
                   {isecat1 : is-ecategory Obj Hom1}{‚Ñì‚Çê‚ÇÇ ‚Ñì~‚ÇÇ : Level}
                   {Hom2 : Obj ‚Üí Obj ‚Üí setoid {‚Ñì‚Çê‚ÇÇ} {‚Ñì~‚ÇÇ}}{isecat2 : is-ecategory Obj Hom2}
                     ‚Üí isecat1 ‚âÖ·∂ú·µÉ·µó isecat2 ‚Üí (mkecat isecat1) ‚â°·∂ú·µÉ·µó (mkecat isecat2)
iso-cat‚Üíeqv-cat {isecat1 = isecat1} {isecat2 = isecat2} iso = record
  { a12 = idobj-efunctor-is-efunctor iso.a12
  ; a21 = idobj-efunctor-is-efunctor iso.a21
  ; iseqvpair = record
              { Œπ1 = record
                   { natt = record
                          { fnc = Œª {A} ‚Üí cod.idar A
                          ; nat = Œª {A} {B} g ‚Üí cod.~proof
                                  cod.idar B cod.‚àò a12.‚Çê (a21.‚Çê g) ~[ cod.lidgen (iso.idcod g) ] cod./
                                  g                               ~[ cod.ridÀ¢ ]‚àé
                                  g cod.‚àò cod.idar A ‚àé
                          }
                   ; natt‚Åª¬π = record
                            { fnc = Œª {A} ‚Üí cod.idar A 
                            ; nat = Œª {A} {B} g ‚Üí cod.lid cod.‚äô cod.ridgenÀ¢ (iso.idcod g cod.À¢)
                            }
                   ; isiso = Œª {A} ‚Üí cod.idar-is-isopair A
                   }
              ; Œπ2 = record
                   { natt = record
                          { fnc = Œª {A} ‚Üí dom.idar A
                          ; nat = Œª {A} {B} f ‚Üí dom.~proof
                                  dom.idar B dom.‚àò a21.‚Çê (a12.‚Çê f) ~[ dom.lidgen (iso.iddom f) ] dom./
                                  f                               ~[ dom.ridÀ¢ ]‚àé
                                  f dom.‚àò dom.idar A ‚àé
                          }
                   ; natt‚Åª¬π = record
                            { fnc = Œª {A} ‚Üí dom.idar A 
                            ; nat = Œª {A} {B} f ‚Üí dom.lid dom.‚äô dom.ridgenÀ¢ (iso.iddom f dom.À¢)
                            }
                   ; isiso = Œª {A} ‚Üí dom.idar-is-isopair A
                   }
              }
  }
  where module dom where
          open ecategory-aux (mkecat isecat1) public
          open iso-defs (mkecat isecat1) public
          open iso-props (mkecat isecat1) public
        module cod where
          open ecategory-aux (mkecat isecat2) public
          open iso-defs (mkecat isecat2) public
          open iso-props (mkecat isecat2) public
          module id (A : Obj) = is-iso-pair (idar-is-isopair A)
        module iso = _‚âÖ·∂ú·µÉ·µó_ iso
        module a12 = idobj-efunctor iso.a12
        module a21 = idobj-efunctor iso.a21
        
             
