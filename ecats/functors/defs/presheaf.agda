
{-# OPTIONS --without-K #-}

module ecats.functors.defs.presheaf where

import tt-basics.setoids using (setoid)
open import ecats.basic-defs.ecat-def&not
open import ecats.functors.defs.efunctor-d&n
open import ecats.functors.defs.natural-iso
open import ecats.functors.defs.natural-transformation
open import ecats.constructions.opposite
open import ecats.constructions.functor-ecat
open import ecats.concr-ecats.Std-lev


-- Presheaves in this sense, where the 

presheaf‚Çó‚Çë·µ•_at : {‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~)(‚Ñìo ‚Ñìr : Level)
                  ‚Üí Set (ecat.‚Ñì‚Çê‚Çó‚Çó ‚ÑÇ ‚äî Std‚Çó‚Çë·µ•.‚Ñì‚Çê‚Çó‚Çó ‚Ñìo ‚Ñìr)
presheaf‚Çó‚Çë·µ• ‚ÑÇ at ‚Ñìo ‚Ñìr = efunctor‚Çó‚Çë·µ• (‚ÑÇ ·µí·µñ) (Std‚Çó‚Çë·µ• ‚Ñìo ‚Ñìr)
                      where module ‚ÑÇ = ecat ‚ÑÇ

presheaf‚Çó‚Çë·µ• : {‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~)
                  ‚Üí Set (ecat.‚Ñì‚Çê‚Çó‚Çó ‚ÑÇ ‚äî Std‚Çó‚Çë·µ•.‚Ñì‚Çê‚Çó‚Çó ‚Ñì‚Çê ‚Ñì~)
presheaf‚Çó‚Çë·µ• ‚ÑÇ = presheaf‚Çó‚Çë·µ• ‚ÑÇ at ‚ÑÇ.‚Ñì‚Çê·µ£·µ£ ‚ÑÇ.‚Ñì~
             where module ‚ÑÇ = ecat ‚ÑÇ

module presheaf‚Çó‚Çë·µ• {‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level}{‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~}(F : presheaf‚Çó‚Çë·µ• ‚ÑÇ)
                  where
  open ecat ‚ÑÇ using (Obj; Hom)
  open efunctor-aux F public
  module ‚Çí (X : Obj) = StdObj (‚Çí X)
  _‚Çí~_ : {X : Obj}(x x' : || ‚Çí X ||) ‚Üí Set ‚Ñì~
  _‚Çí~_ {X} x x' = ‚Çí._~_ X x x'
  module ‚Çê {Z Z' : Obj}(g : || Hom Z Z' ||) = StdHom (‚Çê g)

copresheaf‚Çó‚Çë·µ•_at : {‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~)(‚Ñìo ‚Ñìr : Level)
                    ‚Üí Set (ecat.‚Ñì‚Çê‚Çó‚Çó ‚ÑÇ ‚äî Std‚Çó‚Çë·µ•.‚Ñì‚Çê‚Çó‚Çó ‚Ñìo ‚Ñìr) --‚Ñì‚Çê ‚Ñì~)
copresheaf‚Çó‚Çë·µ• ‚ÑÇ at ‚Ñìo ‚Ñìr = efunctor‚Çó‚Çë·µ• ‚ÑÇ (Std‚Çó‚Çë·µ• ‚Ñìo ‚Ñìr)
                        where module ‚ÑÇ = ecat ‚ÑÇ

copresheaf‚Çó‚Çë·µ• : {‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~)
                    ‚Üí Set (ecat.‚Ñì‚Çê‚Çó‚Çó ‚ÑÇ ‚äî Std‚Çó‚Çë·µ•.‚Ñì‚Çê‚Çó‚Çó ‚Ñì‚Çê ‚Ñì~)
copresheaf‚Çó‚Çë·µ• ‚ÑÇ = copresheaf‚Çó‚Çë·µ• ‚ÑÇ at ‚ÑÇ.‚Ñì‚Çê·µ£·µ£ ‚ÑÇ.‚Ñì~
               where module ‚ÑÇ = ecat ‚ÑÇ

module copresheaf‚Çó‚Çë·µ• {‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level}{‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~}(F : copresheaf‚Çó‚Çë·µ• ‚ÑÇ)
                    where
  open ecat ‚ÑÇ using (Obj; Hom)
  open efunctor-aux F public
  module ‚Çí (X : Obj) = StdObj (‚Çí X)
  _‚Çí~_ : {X : Obj}(x x' : || ‚Çí X ||) ‚Üí Set ‚Ñì~
  _‚Çí~_ {X} x x' = ‚Çí._~_ X x x'
  module ‚Çê {Z Z' : Obj}(g : || Hom Z Z' ||) = StdHom (‚Çê g)

psheaf-mor‚Çó‚Çë·µ• : {‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level}{‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~}
                 ‚Üí presheaf‚Çó‚Çë·µ• ‚ÑÇ ‚Üí presheaf‚Çó‚Çë·µ• ‚ÑÇ ‚Üí Set (‚Ñì‚Çí ‚äî ‚Ñì‚Çê ‚äî ‚Ñì~)
psheaf-mor‚Çó‚Çë·µ• {‚ÑÇ = ‚ÑÇ} = natural-transformation {‚ÑÇ = ‚ÑÇ ·µí·µñ} {ùîª = Std‚Çó‚Çë·µ• ‚ÑÇ.‚Ñì‚Çê·µ£·µ£ ‚ÑÇ.‚Ñì~}
                     where module ‚ÑÇ = ecat ‚ÑÇ

module psheaf-mor‚Çó‚Çë·µ• {‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level}{‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~}{F G : presheaf‚Çó‚Çë·µ• ‚ÑÇ}(Œº : F ‚áí G) where
  open ecat ‚ÑÇ using (Obj)
  open natural-transformation Œº public
  private module ar {Z : Obj} = StdHom (fnc {Z})
  open ar public


-- The category of presheaves

private module PS {‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~) = ecat (Fctr‚Çó‚Çë·µ• ‚ÑÇ (Std‚Çó‚Çë·µ• ‚Ñì‚Çê ‚Ñì~))
PSh‚Çó‚Çë·µ• : {‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~) ‚Üí ecategory‚Çó‚Çë·µ• (PS.‚Ñì‚Çí ‚ÑÇ) (PS.‚Ñì‚Çê·µ£·µ£ ‚ÑÇ) (PS.‚Ñì~ ‚ÑÇ)
PSh‚Çó‚Çë·µ• ‚ÑÇ = Fctr‚Çó‚Çë·µ• (‚ÑÇ ·µí·µñ) (Std‚Çó‚Çë·µ• ‚ÑÇ.‚Ñì‚Çê·µ£·µ£ ‚ÑÇ.‚Ñì~)
        where module ‚ÑÇ = ecat ‚ÑÇ
coPSh‚Çó‚Çë·µ• : {‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~ : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚Çí ‚Ñì‚Çê ‚Ñì~) ‚Üí ecategory‚Çó‚Çë·µ• (PS.‚Ñì‚Çí ‚ÑÇ) (PS.‚Ñì‚Çê·µ£·µ£ ‚ÑÇ) (PS.‚Ñì~ ‚ÑÇ)
coPSh‚Çó‚Çë·µ• ‚ÑÇ = Fctr‚Çó‚Çë·µ• ‚ÑÇ (Std‚Çó‚Çë·µ• ‚ÑÇ.‚Ñì‚Çê·µ£·µ£ ‚ÑÇ.‚Ñì~)
           where module ‚ÑÇ = ecat ‚ÑÇ




-- Presheaves on a locally small category

presheaf : {‚Ñì‚Çí : Level}(‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚Çí 0‚Çó‚Çë·µ• 0‚Çó‚Çë·µ•) ‚Üí Set (‚Ñì‚Çí ‚äî 1‚Çó‚Çë·µ•)
presheaf ‚ÑÇ = presheaf‚Çó‚Çë·µ• ‚ÑÇ
module presheaf = presheaf‚Çó‚Çë·µ•

psheaf-mor : {‚Ñì‚Çí : Level}{‚ÑÇ : ecategory‚Çó‚Çë·µ• ‚Ñì‚Çí 0‚Çó‚Çë·µ• 0‚Çó‚Çë·µ•}
                 ‚Üí presheaf ‚ÑÇ ‚Üí presheaf ‚ÑÇ ‚Üí tt-basics.setoids.setoid {‚Ñì‚Çí} {‚Ñì‚Çí}
psheaf-mor {‚ÑÇ = ‚ÑÇ} = NatTr {‚ÑÇ = ‚ÑÇ ·µí·µñ} {ùîª = Std} 

module psheaf-mor {‚ÑÇ : ecategory}{F G : presheaf ‚ÑÇ}(Œº : F ‚áí G) where
  open ecat ‚ÑÇ using (Obj)
  open natural-transformation Œº public
  private module ar {Z : Obj} = StdHom (fnc {Z})
  open ar public

PSh : (‚ÑÇ : ecategory) ‚Üí large-ecategory
PSh ‚ÑÇ = Fctr‚Çó‚Çõ (‚ÑÇ ·µí·µñ) Std
